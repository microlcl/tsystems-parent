<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
    <springProperty scope="context" name="LOG_HOME_ELK" source="logging.path"/>
    <springProperty scope="context" name="LOG_HOME" source="logging.path"/>
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }) [%t]{magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wex"/>
    <property name="FILE_LOG_PATTERN_bk" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wex"/>
    <property name="FILE_LOG_PATTERN" value="%date{ISO8601} %-5level [%thread] [%X{requestId}] %class.%method\\(%line\\) - %msg%n" />
    <property resource="application.properties"/>
    <property name="ELK_REQ_LOG_FILENAME" value="st-demo-service-req" />
    <property name="ELK_REQ_LOG_ERROR_FILENAME" value="st-demo-service-req-error" />
    <property name="ELK_SSO_LOG_FILENAME" value="remote-service-req" />

    <property name="ELK_REQ_LOG_PATTERN" value="%msg%n" />
    <!--多环境的日志输出-->
    <!--根据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，-->
    <!--在 logback-spring.xml中使用 springProfile 节点来定义，方法如下：-->
    
<!--    <property name="LOG_HOME_ELK" value="${LOG_HOME}" />-->
<!--    <property name="LOG_HOME" value="${LOG_HOME}" />-->


    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--info 级别的日志-->
    <!-- 按照每天生成日志文件 -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!--日志文件输出的文件名-->
            <fileNamePattern>${LOG_HOME}/info.%d{yyyy-MM-dd}.log</fileNamePattern>

            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>

        <!--日志文件最大的大小-->
      <!--   <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
          <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy> -->
    </appender>

    
    <!--WARN 级别的日志-->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/warn.%d{yyyy-MM-dd}.log</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
    </appender>

    <!--ERROR 级别的日志-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
    </appender>

    <!--DEBUG 级别的日志-->
    <!-- 按照每天生成日志文件 -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!--日志文件输出的文件名-->
            <fileNamePattern>${LOG_HOME}/debug.%d{yyyy-MM-dd}.log</fileNamePattern>

            <!--日志文件保留天数-->
            <MaxHistory>3</MaxHistory>
        </rollingPolicy>

        <!--日志文件最大的大小-->
        <!--   <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
          </triggeringPolicy> -->
    </appender>
    
    
    
    
    <appender name="ELK_REQ_RFA" class="ch.qos.logback.core.FileAppender">
		<file>${LOG_HOME_ELK}/${ELK_REQ_LOG_FILENAME}.log</file>
		<encoder>
			<pattern>${ELK_REQ_LOG_PATTERN}</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	
	<appender name="ELK_REQ_ERROR_RFA" class="ch.qos.logback.core.FileAppender">
		<file>${LOG_HOME_ELK}/${ELK_REQ_LOG_ERROR_FILENAME}.log</file>
		<encoder>
			<pattern>${ELK_REQ_LOG_PATTERN}</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	<!-- sso BEGIN -->
    <appender name="ELK_EXE_RFA_SSO" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_HOME_ELK}/${ELK_SSO_LOG_FILENAME}.log</file>
       <encoder>
			<pattern>${ELK_REQ_LOG_PATTERN}</pattern>
			<charset>utf-8</charset>
		</encoder>
    </appender>
    
    <logger name="ELK_REQ_LOG_SSO" level="INFO" additivity="false">
    	<appender-ref ref="ELK_EXE_RFA_SSO" />
    </logger>
    
    <!-- sso end -->
    
    <logger name="ELK_REQ_LOG" level="INFO" additivity="false" >
		<appender-ref ref="ELK_REQ_RFA" />
	</logger>
	
	<logger name="ELK_REQ_ERROR_LOG" level="INFO" additivity="false" >
		<appender-ref ref="ELK_REQ_ERROR_RFA" />
	</logger>
	
	<!-- start ai log config -->


    <!-- end ai log config -->
	
	
	<logger name="com.alisoft.xplatform.asf.cache" level="ERROR" />
    
    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="INFO"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="ERROR"/>
    </root>
</configuration>
